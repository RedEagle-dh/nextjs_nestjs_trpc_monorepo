// AUTOGENERATED FILE - DO NOT EDIT MANUALLY

import { TRPCError, initTRPC } from "@trpc/server";
import { z } from "zod";
import type { TRPCContext } from "./server.ts";

// Local Dependencies (Types, Enums, Schemas)
const loginInputSchema = z.object({
	email: z.string().email(),
	password: z.string(),
});

const tokenOutputSchema = z.object({
	user: z.object({
		id: z.string(),
		email: z.string(),
		name: z.string(),
		role: z.string(),
	}),
	accessToken: z.string(),
	refreshToken: z.string(),
	accessTokenExpiresAt: z.number(),
});

const logoutInputSchema = z.object({
	userId: z.string(),
	accessToken: z.string(),
	refreshToken: z.string(),
});

const refreshTokenInputSchema = z.object({
	userId: z.string(),
	accessToken: z.string().optional(),
	refreshToken: z.string(),
});

const t = initTRPC.context<TRPCContext>().create();

export const publicProcedure = t.procedure;
export const protectedProcedure = t.procedure.use(async (opts) => {
	return opts.next({ ctx: opts.ctx });
});

export const appRouter = t.router({
	auth: t.router({
		login: publicProcedure
			.input(loginInputSchema)
			.output(tokenOutputSchema)
			.mutation(({ input, ctx }) => {
				return {
					user: {
						id: "PLACEHOLDER_STRING",
						email: "PLACEHOLDER_STRING",
						name: "PLACEHOLDER_STRING",
						role: "PLACEHOLDER_STRING",
					},
					accessToken: "PLACEHOLDER_STRING",
					refreshToken: "PLACEHOLDER_STRING",
					accessTokenExpiresAt: 0,
				};
			}),
		logout: publicProcedure
			.input(logoutInputSchema)
			.output(
				z.object({
					status: z.number(),
				}),
			)
			.mutation(({ input, ctx }) => {
				return { status: 0 };
			}),
		refreshToken: publicProcedure
			.input(refreshTokenInputSchema)
			.output(tokenOutputSchema)
			.mutation(({ input, ctx }) => {
				return {
					user: {
						id: "PLACEHOLDER_STRING",
						email: "PLACEHOLDER_STRING",
						name: "PLACEHOLDER_STRING",
						role: "PLACEHOLDER_STRING",
					},
					accessToken: "PLACEHOLDER_STRING",
					refreshToken: "PLACEHOLDER_STRING",
					accessTokenExpiresAt: 0,
				};
			}),
	}),
	user: t.router({
		getHealthcheck: protectedProcedure
			.input(z.string())
			.output(
				z.object({
					status: z.string(),
					timestamp: z.string(),
				}),
			)
			.query(({ input, ctx }) => {
				return {
					status: "PLACEHOLDER_STRING",
					timestamp: "PLACEHOLDER_STRING",
				};
			}),
		mutateHealthcheck: publicProcedure
			.input(
				z.object({
					healthcheck: z.string(),
				}),
			)
			.output(
				z.object({
					status: z.string(),
					timestamp: z.string(),
				}),
			)
			.mutation(({ input, ctx }) => {
				return {
					status: "PLACEHOLDER_STRING",
					timestamp: "PLACEHOLDER_STRING",
				};
			}),
		protectedHealthcheck: protectedProcedure
			.input(
				z.object({
					healthcheck: z.string(),
				}),
			)
			.output(
				z.object({
					status: z.string(),
					timestamp: z.string(),
				}),
			)
			.mutation(({ input, ctx }) => {
				return {
					status: "PLACEHOLDER_STRING",
					timestamp: "PLACEHOLDER_STRING",
				};
			}),
	}),
});

export type AppRouter = typeof appRouter;
