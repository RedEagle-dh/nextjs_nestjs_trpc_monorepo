// AUTOGENERATED FILE - DO NOT EDIT MANUALLY

import { initTRPC, TRPCError } from '@trpc/server';
import { z } from 'zod';
import type { TRPCContext } from './server.ts';

// Local Dependencies (Types, Enums, Schemas)
const testSchema = z.object({
	id: z.string(),
	name: z.string(),
});

const finalSchema = z.object({
	test: testSchema,
});

enum TestNativeNumericEnum {
	ADMIN = 1,
	USER = 2,
	GUEST = 3,
}

enum TestNativeStringEnum {
	ACTIVE = "active",
	INACTIVE = "inactive",
	PENDING = "pending",
}

const t = initTRPC.context<TRPCContext>().create();

export const publicProcedure = t.procedure;
export const protectedProcedure = t.procedure.use(async (opts) => {
  // This middleware is a placeholder for the generated contract.
  // Actual authentication and authorization logic resides in the backend.
  if (!opts.ctx.user && opts.path !== 'healthcheck') { /* Example to allow healthcheck */ 
    // console.warn(`[tRPC Contract] Protected procedure '${opts.path}' called without user context.`);
    // throw new TRPCError({ code: 'UNAUTHORIZED' }); // Optional: make contract stricter
  }
  return opts.next({ ctx: opts.ctx });
});

export const appRouter = t.router({
  user: t.router({
    getHealthcheck: publicProcedure
      .input(z.string())
      .output(z.object({
			status: z.string(),
			timestamp: z.string(),
		}))
      .query(({ input, ctx }) => {
        return { "status": "PLACEHOLDER_STRING", "timestamp": "PLACEHOLDER_STRING" };
      }),
    getFinalSchema: publicProcedure
      .input(finalSchema)
      .output(finalSchema)
      .query(({ input, ctx }) => {
        return { "test": { "id": "PLACEHOLDER_STRING", "name": "PLACEHOLDER_STRING" } };
      }),
    processAllTypes: publicProcedure
      .input(z.object({
			// Grundlegende Typen
			myString: z.string().min(3, "Mindestens 3 Zeichen").max(50),
			myNumber: z.number().int().positive(),
			myBigInt: z.bigint().optional(),
			myBoolean: z.boolean(),
			myDate: z.date(),
			myNull: z.null(),
			myUndefined: z.undefined(), // oder z.void() für Inputs, die explizit undefined sein sollen

			// Literale
			myLiteralString: z.literal("HalloWelt"),
			myLiteralNumber: z.literal(42),
			myLiteralBoolean: z.literal(true),

			// Enums
			myStringEnum: z.enum(["Apfel", "Birne", "Orange"]),
			myNativeNumericEnum: z.nativeEnum(TestNativeNumericEnum),
			myNativeStringEnum: z.nativeEnum(TestNativeStringEnum).optional(),

			// Strukturen
			myObject: z.object({
				nestedId: z.string().uuid(),
				nestedValue: z.string().optional(),
				deeplyNested: z.object({
					deepValue: z.number().nullable(),
				}),
			}),
			myStringArray: z
				.array(z.string())
				.nonempty("Array darf nicht leer sein"),
			myNumberArray: z.array(z.number()),
			myObjectArray: z
				.array(
					z.object({
						id: z.number(),
						prop: z.string().nullable(),
					}),
				)
				.optional(),
			myTuple: z.tuple([z.string(), z.number(), z.boolean().optional()]),

			// Modifikatoren
			myOptionalString: z.string().optional(),
			myNullableNumber: z.number().nullable(),
			myStringWithDefault: z.string().default("Standardwert"),

			// Fortgeschrittenere Typen
			myUnion: z.union([z.string().email(), z.number().max(10)]),
			myDiscriminatedUnion: z.discriminatedUnion("kind", [
				z.object({ kind: z.literal("a"), valueA: z.string() }),
				z.object({ kind: z.literal("b"), valueB: z.number() }),
			]),
			myRecord: z.record(z.string().startsWith("key_"), z.boolean()), // String-Keys, die mit "key_" beginnen, boolean values

			// Effekte (Generator sollte den Basistyp für Placeholder verwenden)
			myTransformedString: z.string().transform((val) => val.length), // Input ist string, Output ist number
			myRefinedNumber: z.number().refine((n) => n > 10, "Muss > 10 sein"),

			// Beliebige Typen (mit Vorsicht für Generierung)
			// myAny: z.any().optional(), // Generator wird hier wahrscheinlich 'any' als Placeholder nehmen
			// myUnknown: z.unknown().optional(), // Ähnlich wie any
		}))
      .output(z.object({
			// Output-Schema spiegelt die Input-Struktur für Testzwecke
			receivedString: z.string(),
			processedNumber: z.number(),
			echoedBigInt: z.bigint().optional(),
			toggledBoolean: z.boolean(),
			formattedDate: z.string(), // Datum wird als String zurückgegeben
			confirmedNull: z.null(),
			wasUndefined: z.boolean(), // Indikator, ob myUndefined gesendet wurde

			literalEchoString: z.literal("HalloWelt"),
			literalEchoNumber: z.literal(42),
			literalEchoBoolean: z.literal(true),

			selectedStringEnum: z.enum(["Apfel", "Birne", "Orange"]),
			selectedNativeNumericEnum: z.nativeEnum(TestNativeNumericEnum),
			selectedNativeStringEnum: z
				.nativeEnum(TestNativeStringEnum)
				.optional(),

			structuredObject: z.object({
				originalId: z.string(),
				computedValue: z.string(),
				deepStatus: z.string().nullable(),
			}),
			stringArrayLength: z.number(),
			sumOfNumbers: z.number(),
			objectArrayCount: z.number().optional(),
			tupleValues: z.object({
				val1: z.string(),
				val2: z.number(),
				val3: z.boolean().optional(),
			}),

			optionalStringPresent: z.boolean(),
			isNumberNull: z.boolean(),
			defaultedString: z.string(),

			unionType: z.union([z.string(), z.number()]), // Spiegeln, was empfangen wurde
			discriminatedUnionEcho: z.discriminatedUnion("kind", [
				// Spiegeln
				z.object({ kind: z.literal("a"), valueA: z.string() }),
				z.object({ kind: z.literal("b"), valueB: z.number() }),
			]),
			recordKeys: z.array(z.string()),

			lazyNodeId: z.string().uuid().optional(),

			transformedStringLength: z.number(), // Output des Transformators
			refinedNumberPassthrough: z.number(), // Nummer wird durchgereicht
		}))
      .mutation(({ input, ctx }) => {
        return { "receivedString": "PLACEHOLDER_STRING", "processedNumber": 0, "echoedBigInt": undefined, "toggledBoolean": false, "formattedDate": "PLACEHOLDER_STRING", "confirmedNull": null, "wasUndefined": false, "literalEchoString": "HalloWelt", "literalEchoNumber": 42, "literalEchoBoolean": true, "selectedStringEnum": "Apfel", "selectedNativeNumericEnum": TestNativeNumericEnum.ADMIN, "selectedNativeStringEnum": undefined, "structuredObject": { "originalId": "PLACEHOLDER_STRING", "computedValue": "PLACEHOLDER_STRING", "deepStatus": null }, "stringArrayLength": 0, "sumOfNumbers": 0, "objectArrayCount": undefined, "tupleValues": { "val1": "PLACEHOLDER_STRING", "val2": 0, "val3": undefined }, "optionalStringPresent": false, "isNumberNull": false, "defaultedString": "PLACEHOLDER_STRING", "unionType": "PLACEHOLDER_STRING", "discriminatedUnionEcho": { "kind": "a", "valueA": "PLACEHOLDER_STRING" }, "recordKeys": [], "lazyNodeId": undefined, "transformedStringLength": 0, "refinedNumberPassthrough": 0 };
      }),
  }),
});

export type AppRouter = typeof appRouter;
