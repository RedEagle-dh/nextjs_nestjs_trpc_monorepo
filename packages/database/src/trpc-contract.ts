// AUTOGENERATED FILE - DO NOT EDIT MANUALLY

import { createRouter as createGeneratedRouter } from './generated/routers';

import { z } from 'zod';
import type { TRPCContext } from '.';
import { createTRPCRouter, publicProcedure, protectedProcedure, mergeRouters } from './trpc';
// Local Dependencies (Types, Enums, Schemas)
const loginInputSchema = z.object({
	email: z.string().email(),
	password: z.string(),
});

const tokenOutputSchema = z.object({
	user: z.object({
		id: z.string(),
		email: z.string(),
		name: z.string(),
		role: z.string(),
	}),
	accessToken: z.string(),
	refreshToken: z.string(),
	accessTokenExpiresAt: z.number(),
});

const logoutInputSchema = z.object({
	userId: z.string(),
	accessToken: z.string(),
	refreshToken: z.string(),
});

const refreshTokenInputSchema = z.object({
	userId: z.string(),
	accessToken: z.string().optional(),
	refreshToken: z.string(),
});

export const customAppRouter = createTRPCRouter({
  auth: createTRPCRouter({
    login: publicProcedure
      .input(loginInputSchema)
      .output(tokenOutputSchema)
      .mutation(({ input, ctx }) => {
        return { "user": { "id": "PLACEHOLDER_STRING", "email": "PLACEHOLDER_STRING", "name": "PLACEHOLDER_STRING", "role": "PLACEHOLDER_STRING" }, "accessToken": "PLACEHOLDER_STRING", "refreshToken": "PLACEHOLDER_STRING", "accessTokenExpiresAt": 0 };
      }),
    logout: publicProcedure
      .input(logoutInputSchema)
      .output(z.object({
			status: z.number(),
		}))
      .mutation(({ input, ctx }) => {
        return { "status": 0 };
      }),
    refreshToken: publicProcedure
      .input(refreshTokenInputSchema)
      .output(tokenOutputSchema)
      .mutation(({ input, ctx }) => {
        return { "user": { "id": "PLACEHOLDER_STRING", "email": "PLACEHOLDER_STRING", "name": "PLACEHOLDER_STRING", "role": "PLACEHOLDER_STRING" }, "accessToken": "PLACEHOLDER_STRING", "refreshToken": "PLACEHOLDER_STRING", "accessTokenExpiresAt": 0 };
      }),
  }),
  healthcheck: createTRPCRouter({
    getHealthcheck: protectedProcedure
      .input(z.string())
      .output(z.object({
			status: z.string(),
			timestamp: z.string(),
		}))
      .query(({ input, ctx }) => {
        return { "status": "PLACEHOLDER_STRING", "timestamp": "PLACEHOLDER_STRING" };
      }),
    mutateHealthcheck: publicProcedure
      .input(z.object({
			healthcheck: z.string(),
		}))
      .output(z.object({
			status: z.string(),
			timestamp: z.string(),
		}))
      .mutation(({ input, ctx }) => {
        return { "status": "PLACEHOLDER_STRING", "timestamp": "PLACEHOLDER_STRING" };
      }),
    protectedHealthcheck: protectedProcedure
      .input(z.object({
			healthcheck: z.string(),
		}))
      .output(z.object({
			status: z.string(),
			timestamp: z.string(),
		}))
      .mutation(({ input, ctx }) => {
        return { "status": "PLACEHOLDER_STRING", "timestamp": "PLACEHOLDER_STRING" };
      }),
  }),
});

const generatedRouter = createGeneratedRouter();

export const appRouter = mergeRouters(generatedRouter, customAppRouter);

export type AppRouter = typeof appRouter;
